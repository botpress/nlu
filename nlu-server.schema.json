{
  "description": "Many configuration options allows you to specify textually the duration, interval, etc.\nWe use the library \"ms\", so head over to this page to see supported formats: https://www.npmjs.com/package/ms",
  "type": "object",
  "properties": {
    "version": {
      "type": "string"
    },
    "appSecret": {
      "type": "string"
    },
    "httpServer": {
      "type": "object",
      "properties": {
        "host": {
          "default": "localhost",
          "type": "string"
        },
        "port": {
          "default": 3000,
          "type": "number"
        },
        "proxy": {
          "description": "There are three external URLs that Botpress calls: https://license.botpress.io, https://duckling.botpress.io and https://lang-01.botpress.io\nIf you are behind a corporate proxy, you can configure it below.\nIt is also possible to self-host Duckling, please check the documentation",
          "type": "string"
        },
        "backlog": {
          "default": 0,
          "type": "number"
        },
        "bodyLimit": {
          "default": "10mb",
          "type": ["string", "number"]
        },
        "cors": {
          "description": "CORS policy for the server. You can provide other configuration parameters\nlisted on this page: https://expressjs.com/en/resources/middleware/cors.html",
          "type": "object",
          "properties": {
            "enabled": {
              "default": true,
              "type": "boolean"
            },
            "origin": {
              "type": "string"
            },
            "credentials": {
              "type": "boolean"
            }
          }
        },
        "externalUrl": {
          "description": "Represents the complete base URL exposed externally by your bot. This is useful if you configure the bot\nlocally and use NGINX as a reverse proxy to handle HTTPS. It should include the protocol and no trailing slash.\nIf unset, it will be constructed from the real host/port",
          "default": "",
          "type": "string"
        },
        "session": {
          "type": "object",
          "properties": {
            "enabled": {
              "default": false,
              "type": "boolean"
            },
            "maxAge": {
              "description": "Time from Date.now() for expiry\nDefaults to one hour",
              "default": "1h",
              "type": "string"
            }
          },
          "required": ["enabled", "maxAge"]
        },
        "socketTransports": {
          "description": "Configure the priority for establishing socket connections for webchat and studio users.\nIf the first method is not supported, it will fallback on the second.\nIf the first is supported but it fails with an error, it will not fallback.",
          "default": ["websocket", "polling"],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "rateLimit": {
          "type": "object",
          "properties": {
            "enabled": {
              "description": "* Security option to rate limit potential attacker trying to brute force something",
              "default": false,
              "type": "boolean"
            },
            "limitWindow": {
              "description": "Time window to compute rate limiting",
              "default": "30s",
              "type": "string"
            },
            "limit": {
              "description": "* Maximum number of request in limit window to ban an IP. Keep in mind that this includes admin, studio and chat request so don't put it too low",
              "default": 600,
              "type": "number"
            }
          },
          "required": ["enabled", "limit", "limitWindow"]
        },
        "headers": {
          "description": "Adds default headers to the server's responses",
          "default": {
            "X-Powered-By": "Botpress"
          },
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      },
      "required": [
        "backlog",
        "bodyLimit",
        "cors",
        "externalUrl",
        "headers",
        "host",
        "port",
        "rateLimit",
        "session",
        "socketTransports"
      ]
    },
    "converse": {},
    "dialog": {
      "$ref": "#/definitions/DialogConfig"
    },
    "logs": {
      "$ref": "#/definitions/LogsConfig"
    },
    "modules": {
      "type": "array",
      "items": {
        "$ref": "#/definitions/ModuleConfigEntry"
      }
    },
    "pro": {
      "type": "object",
      "properties": {
        "collaboratorsAuthStrategies": {
          "description": "These strategies are allowed to log on the Admin UI.\nOnce a user is logged on, he still needs individual access to respective workspaces",
          "default": ["default"],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "enabled": {
          "description": "When pro features are enabled, the license key must be provided",
          "default": false,
          "type": "boolean"
        },
        "licenseKey": {
          "description": "The license key for the server.  Optionally you can use the BP_LICENSE_KEY env variable.\nYou can purchase a license on https://botpress.com\nFor usage with Botpress Pro/Enterprise.",
          "default": "paste your license key here",
          "type": "string"
        },
        "monitoring": {
          "$ref": "#/definitions/MonitoringConfig"
        },
        "alerting": {
          "$ref": "#/definitions/AlertingConfig",
          "description": "The alert service is an extension of the monitoring service. The monitoring collects data, while the alert service\nanalyzes them and opens an incident when configured threshold are met."
        },
        "externalAuth": {
          "$ref": "#/definitions/ExternalAuthConfig",
          "description": "External Authentication makes it possible to authenticate end-users (chat users) from another system\nby using JWT tokens.\n\nIn addition to authenticate the users, the JWT token can also contain arbitrary additional\ndata about the user that you would like to make Botpress aware of.\n\nThe identity of the user will be checked for every incoming message and the additional data in the JWT token\nwill be available in `event.credentials`."
        },
        "branding": {
          "description": "Configure the branding of the admin panel and the studio. A valid license is required",
          "type": "object",
          "properties": {
            "admin": {
              "type": "object",
              "properties": {
                "title": {
                  "description": "Change the name displayed in the title bar on the admin panel",
                  "type": "string"
                },
                "favicon": {
                  "description": "Replace the default favicon",
                  "type": "string"
                },
                "customCss": {
                  "description": "Path to your custom stylesheet",
                  "type": "string"
                }
              }
            },
            "studio": {
              "type": "object",
              "properties": {
                "title": {
                  "description": "Change the name displayed in the title bar on the studio",
                  "type": "string"
                },
                "favicon": {
                  "description": "Replace the default favicon",
                  "type": "string"
                },
                "customCss": {
                  "description": "Path to your custom stylesheet",
                  "type": "string"
                }
              },
              "required": ["customCss"]
            }
          },
          "required": ["admin", "studio"]
        }
      },
      "required": ["alerting", "branding", "collaboratorsAuthStrategies", "enabled", "licenseKey", "monitoring"]
    },
    "superAdmins": {
      "description": "An array of e-mails of users which will have root access to Botpress (manage users, server settings)",
      "type": "array",
      "items": {
        "$ref": "#/definitions/UniqueUser"
      }
    },
    "sendUsageStats": {
      "description": "When enabled, Botpress collects anonymous data about the bot's usage",
      "default": true,
      "type": "boolean"
    },
    "dataRetention": {
      "$ref": "#/definitions/DataRetentionConfig",
      "description": "When this feature is enabled, fields saved as user attributes will be automatically erased when they expires. The timer is reset each time the value is modified\nSetting a policy called \"email\": \"30d\" means that once an email is set, it will be removed in 30 days, unless it is changed in that timespan"
    },
    "botCategories": {
      "description": "An array of categories in which a bot can be created in your botpress installation. Good for platform use-cases.",
      "default": [],
      "type": "array",
      "items": {
        "type": "string"
      }
    },
    "allowServerReboot": {
      "description": "When this option is enabled, Super Admins are able to reboot the Botpress Server via the Admin UI\nWe recommend disabling this in a production environment, and if you use a process management tool like PM2",
      "default": true,
      "type": "boolean"
    },
    "fileUpload": {
      "type": "object",
      "properties": {
        "maxFileSize": {
          "description": "Maximum file size for media files upload (in mb)",
          "default": "25mb",
          "type": "string"
        },
        "allowedMimeTypes": {
          "description": "The list of allowed extensions for media file uploads",
          "default": ["image/jpeg", "image/png", "image/gif", "audio/mpeg", "video/mp4", "application/pdf"],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": ["allowedMimeTypes", "maxFileSize"]
    },
    "jwtToken": {
      "type": "object",
      "properties": {
        "duration": {
          "description": "The duration for which the token granting access to manage Botpress will be active.",
          "default": "1h",
          "type": "string"
        },
        "allowRefresh": {
          "description": "When enabled, the token is refreshed every 5 minutes while the user is connected",
          "default": true,
          "type": "boolean"
        },
        "useCookieStorage": {
          "description": "Use an HTTP-Only secure cookie instead of the local storage for the JWT Token",
          "default": false,
          "type": "boolean"
        },
        "cookieOptions": {
          "$ref": "#/definitions/CookieOptions",
          "description": "Configure the options of the cookie sent to the user, for example the domain",
          "default": {}
        }
      },
      "required": ["allowRefresh", "duration", "useCookieStorage"]
    },
    "autoRevision": {
      "description": "When enabled, a bot revision will be stored in the revisions directory when it change or its about to change stage",
      "default": false,
      "type": "boolean"
    },
    "eventCollector": {
      "$ref": "#/definitions/EventCollectorConfig"
    },
    "botMonitoring": {
      "$ref": "#/definitions/BotMonitoringConfig"
    },
    "authStrategies": {
      "default": {
        "default": {
          "type": "basic",
          "allowSelfSignup": false,
          "options": {
            "maxLoginAttempt": 0
          }
        }
      },
      "type": "object",
      "additionalProperties": {
        "$ref": "#/definitions/AuthStrategy"
      }
    },
    "showPoweredBy": {
      "description": "Displays the \"Powered by Botpress\" under the webchat.\nHelp us spread the word, enable this to show your support !",
      "default": true,
      "type": "boolean"
    },
    "noRepeatPolicy": {
      "description": "When true, the bot will avoid repeating itself. By default it is disabled.\nUse in conjunction with BP_DECISION_MIN_NO_REPEAT to set the time before the bot will repeat itself",
      "default": false,
      "type": "boolean"
    },
    "additionalLanguages": {
      "description": "By adding this, you'll make possible to translate a bot in more languages than those supported by your botpress language server\nWarning: This means that Botpress NLU won't be working properly and you'll need to handle NLU on your own with a **beforeIncoming** Hook.",
      "default": [],
      "type": "array",
      "items": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "code": {
            "type": "string"
          }
        },
        "required": ["code", "name"]
      }
    },
    "actionServers": {
      "$ref": "#/definitions/ActionServersConfig",
      "description": "Action Servers to be used when dispatching actions."
    },
    "experimental": {
      "description": "Whether or not to display experimental features throughout the UI. These are subject\nto change and can be unstable.",
      "default": false,
      "type": "boolean"
    },
    "telemetry": {
      "type": "object",
      "properties": {
        "entriesLimit": {
          "description": "The number of entries stored in the telemetry database",
          "default": 1000,
          "type": "number"
        }
      },
      "required": ["entriesLimit"]
    },
    "nlu": {
      "$ref": "#/definitions/NLUConfig"
    }
  },
  "required": [
    "actionServers",
    "allowServerReboot",
    "appSecret",
    "authStrategies",
    "autoRevision",
    "botCategories",
    "botMonitoring",
    "converse",
    "dialog",
    "eventCollector",
    "experimental",
    "fileUpload",
    "httpServer",
    "jwtToken",
    "logs",
    "modules",
    "nlu",
    "noRepeatPolicy",
    "pro",
    "sendUsageStats",
    "showPoweredBy",
    "superAdmins",
    "telemetry",
    "version"
  ],
  "definitions": {
    "DialogConfig": {
      "type": "object",
      "properties": {
        "janitorInterval": {
          "description": "Interval between executions of the janitor that checks for stale contexts and sessions.",
          "default": "10s",
          "type": "string"
        },
        "timeoutInterval": {
          "description": "Interval before a session's context expires.\ne.g. when the conversation is stale and has not reached the END of the flow.\nThis will reset the position of the user in the flow.",
          "default": "2m",
          "type": "string"
        },
        "sessionTimeoutInterval": {
          "description": "Interval before a session expires. e.g. when the user has not spoken for a while.\nThe session including its variable will be deleted.",
          "default": "30m",
          "type": "string"
        }
      },
      "required": ["janitorInterval", "sessionTimeoutInterval", "timeoutInterval"]
    },
    "LogsConfig": {
      "type": "object",
      "properties": {
        "dbOutput": {
          "description": "The database output will not record Debug logs.",
          "type": "object",
          "properties": {
            "expiration": {
              "description": "Logs will be kept for this amount of time in the database",
              "default": "2 weeks",
              "type": "string"
            },
            "janitorInterval": {
              "default": "30s",
              "type": "string"
            }
          },
          "required": ["expiration", "janitorInterval"]
        },
        "fileOutput": {
          "description": "The file output records everything that is displayed in the console logs.",
          "type": "object",
          "properties": {
            "enabled": {
              "description": "Enable or disable the output of logs to the file system. A new file is created each day",
              "default": false,
              "type": "boolean"
            },
            "folder": {
              "description": "The path (relative or absolute) to the logs folder.",
              "default": "./",
              "type": "string"
            },
            "maxFileSize": {
              "description": "The maximum file size that the log can reach before a new one is started (size in kb)",
              "default": 10000,
              "type": "number"
            }
          },
          "required": ["enabled", "folder", "maxFileSize"]
        }
      },
      "required": ["dbOutput", "fileOutput"]
    },
    "ModuleConfigEntry": {
      "type": "object",
      "properties": {
        "location": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        }
      },
      "required": ["enabled", "location"]
    },
    "MonitoringConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "To enable server monitoring, you need to enable the Pro version and configure your Redis server.",
          "default": false,
          "type": "boolean"
        },
        "collectionInterval": {
          "description": "The interval between data collection of metrics and usage. The lower the value brings more details,\nbut comes at the cost of more storage required & processing time when viewing data.",
          "default": "10s",
          "type": "string"
        },
        "retentionPeriod": {
          "description": "Data older than this will be cleared periodically.",
          "default": "10d",
          "type": "string"
        },
        "janitorInterval": {
          "description": "The delay between execution of the janitor which removes statistics outside of the previously defined period",
          "default": "15m",
          "type": "string"
        }
      },
      "required": ["collectionInterval", "enabled", "janitorInterval", "retentionPeriod"]
    },
    "AlertingConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "To enable the alerting service, you need to enable the monitoring first.",
          "default": false,
          "type": "boolean"
        },
        "watcherInterval": {
          "description": "Interval between each executions of the rule checker",
          "default": "10s",
          "type": "string"
        },
        "retentionPeriod": {
          "description": "The duration for which resolved incidents will be kept",
          "default": "10d",
          "type": "string"
        },
        "janitorInterval": {
          "description": "Delay between the execution of the janitor which removes resolved incidents.",
          "default": "15m",
          "type": "string"
        },
        "rules": {
          "description": "The list of rules which triggers an incident. When triggered, the OnIncidentChangedStatus hook\nis called with the incident.",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/IncidentRule"
          }
        }
      },
      "required": ["enabled", "janitorInterval", "retentionPeriod", "rules", "watcherInterval"]
    },
    "IncidentRule": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "field": {
          "type": "string"
        },
        "aggregation": {
          "$ref": "#/definitions/Aggregation"
        },
        "operand": {
          "$ref": "#/definitions/Operand"
        },
        "value": {
          "type": "number"
        },
        "timeframe": {
          "description": "This is the timeframe used for the calculation of the selected value",
          "type": "string"
        },
        "cooldown": {
          "description": "When an incident is resolved, this delay must be elapsed before a new incident is triggered for the same rule/host",
          "type": "string"
        }
      },
      "required": ["aggregation", "field", "name", "operand", "timeframe", "value"]
    },
    "Aggregation": {
      "enum": ["avg", "count", "last", "max", "min", "sum"],
      "type": "string"
    },
    "Operand": {
      "enum": ["equalOrLessThan", "equalOrMoreThan"],
      "type": "string"
    },
    "ExternalAuthConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "Set to true to enable external authentication",
          "default": false,
          "type": "boolean"
        },
        "audience": {
          "description": "If provided, the audience of the token will be checked against the provided value(s).\n[Click here](https://www.npmjs.com/package/jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback) to learn more.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "issuer": {
          "description": "If provided, the issuer of the token will be checked against the provided value(s).\n[Click here](https://www.npmjs.com/package/jsonwebtoken#jwtverifytoken-secretorpublickey-options-callback) to learn more.",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "algorithms": {
          "description": "The algorithms allowed to validate the JWT tokens.",
          "default": ["HS256"],
          "type": "array",
          "items": {
            "enum": [
              "ES256",
              "ES384",
              "ES512",
              "HS256",
              "HS384",
              "HS512",
              "PS256",
              "PS384",
              "PS512",
              "RS256",
              "RS384",
              "RS512",
              "none"
            ],
            "type": "string"
          }
        },
        "publicKey": {
          "description": "You need to provide the public key used to verify the JWT token authenticity.\nIf not provided, the public key will be read from `data/global/end_users_auth.key`",
          "default": "insert key here",
          "type": "string"
        },
        "jwksClient": {
          "description": "Alternatively, you can configure a client to fetch a JWKS file for the public key.\nThe audience, issuer and algorithms must also be provided.",
          "type": "object",
          "additionalProperties": {},
          "properties": {
            "jwksUri": {
              "description": "The full URL to the jwks.json file",
              "type": "string"
            },
            "keyId": {
              "description": "The ID of the key in the jwks file",
              "type": "string"
            }
          },
          "required": ["jwksUri", "keyId"]
        }
      },
      "required": ["algorithms", "enabled"]
    },
    "UniqueUser": {
      "type": "object",
      "properties": {
        "email": {
          "type": "string"
        },
        "strategy": {
          "type": "string"
        }
      },
      "required": ["email", "strategy"]
    },
    "DataRetentionConfig": {
      "type": "object",
      "properties": {
        "janitorInterval": {
          "description": "The janitor will check for expired fields at the set interval (second, minute, hour, day)",
          "default": "10m",
          "type": "string"
        },
        "policies": {
          "$ref": "#/definitions/RetentionPolicy"
        }
      },
      "required": ["janitorInterval", "policies"]
    },
    "RetentionPolicy": {
      "default": {},
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "CookieOptions": {
      "type": "object",
      "properties": {
        "maxAge": {
          "type": "number"
        },
        "signed": {
          "type": "boolean"
        },
        "expires": {
          "anyOf": [
            {
              "type": "string",
              "format": "date-time"
            },
            {
              "type": "boolean"
            }
          ]
        },
        "httpOnly": {
          "type": "boolean"
        },
        "path": {
          "type": "string"
        },
        "domain": {
          "type": "string"
        },
        "secure": {
          "enum": ["auto", false, true]
        },
        "encode": {
          "type": "object"
        },
        "sameSite": {
          "type": ["string", "boolean"]
        }
      }
    },
    "EventCollectorConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "When enabled, incoming and outgoing events will be saved on the database.\nIt is required for some modules to work properly (eg: history, testing, developer tools on channel web)",
          "default": true,
          "type": "boolean"
        },
        "collectionInterval": {
          "description": "Events are batched then sent to the database. Change the delay to save them more frequently or not.",
          "default": "1s",
          "type": "string"
        },
        "retentionPeriod": {
          "description": "The duration for which events will be kept in the database",
          "default": "30d",
          "type": "string"
        },
        "ignoredEventTypes": {
          "description": "Specify an array of event types that won't be persisted to the database. For example, typing events and visits\nmay not provide you with useful information",
          "default": ["visit", "typing"],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "ignoredEventProperties": {
          "description": "Specify an array of properties that will be stripped from the event before being saved. For example, the \"state\" property of the event\ncontains a lot of details about the user session (context, attributes, etc) and may not be useful in some cases.",
          "default": [],
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "debuggerProperties": {
          "description": "These properties are only stored with the event when the user is logged on the studio",
          "default": ["nlu.predictions", "state", "processing", "activeProcessing"],
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "collectionInterval",
        "debuggerProperties",
        "enabled",
        "ignoredEventProperties",
        "ignoredEventTypes",
        "retentionPeriod"
      ]
    },
    "BotMonitoringConfig": {
      "type": "object",
      "properties": {
        "enabled": {
          "description": "This must be enabled for the hook OnBotError to work properly.",
          "default": true,
          "type": "boolean"
        },
        "interval": {
          "description": "The interval between which logs are accumulated before triggering the OnBotError hook.\nSet this value higher if the hook is triggered too often.",
          "default": "1m",
          "type": "string"
        }
      },
      "required": ["enabled", "interval"]
    },
    "AuthStrategy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "type": {
          "$ref": "#/definitions/AuthStrategyType",
          "description": "Defines which authentication strategy to use. When the strategy is changed, accounts created before may no longer log in.",
          "default": "basic"
        },
        "label": {
          "description": "Set a label to display to users instead of the ID (ex: Botpress SSO)",
          "type": "string"
        },
        "options": {
          "description": "Defines custom options based on the chosen authentication strategy.",
          "anyOf": [
            {
              "$ref": "#/definitions/AuthStrategyBasic"
            },
            {
              "$ref": "#/definitions/AuthStrategySaml"
            },
            {
              "$ref": "#/definitions/AuthStrategyOauth2"
            },
            {
              "$ref": "#/definitions/AuthStrategyLdap"
            }
          ]
        },
        "fieldMapping": {
          "$ref": "#/definitions/FieldMapping",
          "description": "Maps the values returned by your provider to Botpress user parameters."
        },
        "allowSelfSignup": {
          "description": "When enabled, users are able to register new accounts by themselves. For example, if you use the SAML strategy and this is enabled,\nany user able to sign in using your SAML provider will create automatically an account on Botpress.",
          "default": false,
          "type": "boolean"
        },
        "hidden": {
          "description": "When enabled, authentication strategy will not be shown on the login page and only alternative ones will be present.",
          "default": false,
          "type": "boolean"
        }
      },
      "required": ["allowSelfSignup", "hidden", "options", "type"]
    },
    "AuthStrategyType": {
      "enum": ["basic", "ldap", "oauth2", "saml"],
      "type": "string"
    },
    "AuthStrategyBasic": {
      "type": "object",
      "properties": {
        "maxLoginAttempt": {
          "description": "The maximum number of wrong passwords the user can enter before his account is locked out.\nSet it to 0 for unlimited tries",
          "default": 3,
          "type": "number"
        },
        "lockoutDuration": {
          "description": "The amount of time the account will be locked out after reaching the threshold of max login attempt.\nLeave undefined to never automatically unlock the user. The delay is reset on each attempt.\nTo unlock a user, edit manually the file data/global/workspaces.json and set \"locked_out\" to false",
          "type": "string"
        },
        "passwordExpiryDelay": {
          "description": "The password will expire after the duration specified here, prompting the user to change it",
          "default": "",
          "type": "string"
        },
        "passwordMinLength": {
          "description": "The minimum length of the password. None if undefined.",
          "type": "number"
        },
        "requireComplexPassword": {
          "description": "When enabled, the password must have at least one character from 3 of these categories: lowercase, uppercase, number, special char",
          "default": false,
          "type": "boolean"
        }
      },
      "required": ["maxLoginAttempt"]
    },
    "AuthStrategySaml": {
      "description": "SAML Options, identical to the \"passeport-saml\" NPM library",
      "type": "object",
      "properties": {
        "entryPoint": {
          "description": "This is the page of the external SAML IdP where users will login",
          "type": "string"
        },
        "callbackUrl": {
          "description": "The callback url is called by the SAML provider with the payload. The path provided here is absolute.",
          "default": "http://localhost:3000/admin/login-callback",
          "type": "string"
        },
        "path": {
          "description": "The callback url is called by the SAML provider with the payload. The path provided here is relative to ${externalUrl}/admin\nFor example, if you use the default callback, it will be available at http://localhost:3000/admin/login-callback",
          "default": "/login-callback",
          "type": "string"
        },
        "issuer": {
          "description": "The `entityID` you provided the IdP",
          "default": "botpress-server-saml",
          "type": "string"
        },
        "cert": {
          "description": "The public PEM certificate provided by the SAML IdP, starting with \"-----BEGIN CERTIFICATE-----\"\nThe string should be provided as one line (use \\n for new lines)",
          "default": "<paste PEM certificate>",
          "type": "string"
        },
        "acceptedClockSkewMs": {
          "description": "Change if there is a significant time difference between this server and your identity provider",
          "default": 5000,
          "type": "number"
        }
      },
      "required": ["acceptedClockSkewMs", "callbackUrl", "cert", "entryPoint", "issuer"]
    },
    "AuthStrategyOauth2": {
      "type": "object",
      "properties": {
        "authorizationURL": {
          "type": "string"
        },
        "tokenURL": {
          "type": "string"
        },
        "clientID": {
          "type": "string"
        },
        "clientSecret": {
          "type": "string"
        },
        "scope": {
          "description": "Scopes that should be requested from the service provider. Don't forget to map them in the fieldMapping property",
          "default": "openid profile email",
          "anyOf": [
            {
              "type": "array",
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ]
        },
        "callbackURL": {
          "description": "The Callback URL on this server where the service provider will return the user. Replace the last part with the strategy ID",
          "default": "http://localhost:3000/api/v1/auth/login-callback/oauth2/myauth",
          "type": "string"
        },
        "userInfoURL": {
          "type": "string"
        },
        "jwtToken": {
          "description": "If the access token is a JWT token, set the parameters below to decode it.",
          "type": "object",
          "properties": {
            "audience": {
              "description": "If provided, the audience of the token will be checked against the provided value(s).",
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "issuer": {
              "description": "If provided, the issuer of the token will be checked against the provided value(s).",
              "anyOf": [
                {
                  "type": "array",
                  "items": {
                    "type": "string"
                  }
                },
                {
                  "type": "string"
                }
              ]
            },
            "algorithms": {
              "description": "The algorithms allowed to validate the JWT tokens.",
              "default": ["HS256"],
              "type": "array",
              "items": {
                "enum": [
                  "ES256",
                  "ES384",
                  "ES512",
                  "HS256",
                  "HS384",
                  "HS512",
                  "PS256",
                  "PS384",
                  "PS512",
                  "RS256",
                  "RS384",
                  "RS512",
                  "none"
                ],
                "type": "string"
              }
            },
            "publicKey": {
              "description": "The public certificate starting with \"-----BEGIN CERTIFICATE-----\"\nThe string should be provided as one line (use \\n for new lines)\nIf the key is not set, it will try to read the file `data/global/oauth2_YOUR_STRATEGY_ID.pub`",
              "type": "string"
            }
          },
          "required": ["algorithms"]
        }
      },
      "required": ["authorizationURL", "callbackURL", "clientID", "clientSecret", "scope", "tokenURL"]
    },
    "AuthStrategyLdap": {
      "type": "object",
      "properties": {
        "serverUrl": {
          "type": "string"
        },
        "bindDn": {
          "type": "string"
        },
        "bindCredentials": {
          "type": "string"
        },
        "searchBase": {
          "type": "string"
        },
        "searchFilter": {
          "type": "string"
        },
        "timeout": {
          "type": "number"
        },
        "tlsEnabled": {
          "type": "boolean"
        },
        "certificates": {
          "description": "Path to certificates on the file system",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      },
      "required": [
        "bindCredentials",
        "bindDn",
        "certificates",
        "searchBase",
        "searchFilter",
        "serverUrl",
        "timeout",
        "tlsEnabled"
      ]
    },
    "FieldMapping": {
      "type": "object",
      "additionalProperties": {
        "type": "string"
      }
    },
    "ActionServersConfig": {
      "type": "object",
      "properties": {
        "local": {
          "type": "object",
          "properties": {
            "port": {
              "description": "Port on which the local Action Server listens",
              "default": 4000,
              "type": "number"
            },
            "enabled": {
              "description": "Whether or not the enable the local Action Server",
              "default": true,
              "type": "boolean"
            }
          },
          "required": ["enabled", "port"]
        },
        "remotes": {
          "description": "The list of remote Action Servers",
          "default": [],
          "type": "array",
          "items": {
            "$ref": "#/definitions/ActionServer"
          }
        }
      },
      "required": ["local", "remotes"]
    },
    "ActionServer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "baseUrl": {
          "type": "string"
        }
      },
      "required": ["baseUrl", "id"]
    },
    "NLUConfig": {
      "type": "object",
      "properties": {
        "queueTrainingOnBotMount": {
          "description": "Whether or not to train bots on mount",
          "type": "boolean"
        },
        "legacyElection": {
          "description": "Whether or not you want to use the deprecated legacy election",
          "type": "boolean"
        },
        "autoStartNLUServer": {
          "description": "Whether to automatically launch the nlu server when botpress is booting or not.\nSet to false if you want to manually launch the nlu server",
          "default": true,
          "type": "boolean"
        },
        "nluServerEndpoint": {
          "description": "The endpoint of your manualy launched nlu server\nOnly relevant if @see autoStartNLUServer is false",
          "default": "http://localhost:3200",
          "type": "string"
        },
        "ducklingEnabled": {
          "description": "Weither or not to use system entities\nOnly relevant if @see autoStartNLUServer is true",
          "default": true,
          "type": "boolean"
        },
        "ducklingURL": {
          "description": "If you want a fully on-prem installation, you can host\nFacebook's Duckling on your own infrastructure and change this URL\nOnly relevant if @see ducklingEnabled is true\nOnly relevant if @see autoStartNLUServer is true",
          "default": "https://duckling.botpress.io",
          "type": "string"
        },
        "languageSources": {
          "description": "The list of sources to load languages from\nOnly relevant if @see autoStartNLUServer is true",
          "default": [
            {
              "endpoint": "https://lang-01.botpress.io"
            }
          ],
          "type": "array",
          "items": {
            "$ref": "#/definitions/LanguageSource"
          }
        },
        "modelCacheSize": {
          "description": "Maximum allowed model cache size\nOnly relevant if @see autoStartNLUServer is true",
          "type": "string"
        },
        "maxTrainingPerInstance": {
          "description": "Maximum number of concurrent trainings per Botpress instance\nOnly relevant if @see autoStartNLUServer is true",
          "type": "number"
        }
      },
      "required": ["autoStartNLUServer", "ducklingEnabled", "ducklingURL", "languageSources", "nluServerEndpoint"]
    },
    "LanguageSource": {
      "type": "object",
      "properties": {
        "endpoint": {
          "type": "string"
        },
        "authToken": {
          "type": "string"
        }
      },
      "required": ["endpoint"]
    }
  },
  "$schema": "http://json-schema.org/draft-07/schema#"
}
